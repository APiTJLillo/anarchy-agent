// memory_integration.a.i - Integration of memory systems for Anarchy Agent
// Combines vector memory and hierarchical memory into a unified memory system

// Define string dictionary entries for memory integration
üìù("mi_init", "Initializing memory integration system...");
üìù("mi_store", "Storing memory: {}");
üìù("mi_retrieve", "Retrieving memory: {}");
üìù("mi_search", "Searching memory: {}");
üìù("mi_error", "Memory integration error: {}");
üìù("mi_success", "Memory integration success: {}");

// Memory Integration Module Definition
ŒªMemoryIntegration {
    // Initialize memory integration
    ∆íinitialize(Œ±options) {
        ‚åΩ(:mi_init);
        
        // Set default options
        Œπthis.options = options || {};
        Œπthis.options.storage_path = this.options.storage_path || "./memory_storage";
        Œπthis.options.llm_integration = this.options.llm_integration || null;
        Œπthis.options.embedding_dimensions = this.options.embedding_dimensions || 384;
        
        // Initialize components
        Œπthis.vector_memory = null;
        Œπthis.hierarchical_memory = null;
        
        // Initialize component status
        Œπthis.components_status = {
            vector_memory: ‚ä•,
            hierarchical_memory: ‚ä•
        };
        
        // Initialize all components
        this._initialize_components();
        
        ‚üº(‚ä§);
    }
    
    // Store a memory
    ∆ístore(œÉcontent, Œ±metadata, Œ±options) {
        ‚åΩ(:mi_store, content.substring(0, 30) + "...");
        
        √∑{
            // Set store options
            Œπstore_options = options || {};
            Œπnamespace = store_options.namespace || "general";
            Œπpath = store_options.path || "";
            Œπrelationships = store_options.relationships || [];
            
            // Check if components are initialized
            if (!this.components_status.vector_memory) {
                ‚åΩ(:mi_error, "Vector memory not initialized");
                ‚üº(null);
            }
            
            // Store in vector memory
            Œπmemory = this.vector_memory.store(content, metadata);
            
            if (!memory) {
                ‚åΩ(:mi_error, "Failed to store in vector memory");
                ‚üº(null);
            }
            
            // Store in hierarchical memory if available
            if (this.components_status.hierarchical_memory) {
                // Ensure namespace exists
                Œπnamespace_parts = namespace.split('/');
                Œπbase_namespace = namespace_parts[0];
                Œπcategory = "general";
                
                // Determine category based on metadata or namespace
                if (metadata && metadata.type) {
                    if (this.hierarchical_memory.categories[metadata.type]) {
                        category = metadata.type;
                    }
                }
                
                // Create namespace if it doesn't exist
                if (!this.hierarchical_memory.namespaces[base_namespace]) {
                    this.hierarchical_memory.create_namespace(base_namespace, category, {
                        description: `Namespace for ${base_namespace} memories`
                    });
                }
                
                // Add to hierarchical memory
                this.hierarchical_memory.add_memory(memory.id, base_namespace, {
                    path: path
                });
                
                // Create relationships if specified
                ‚àÄ(relationships, Œªrelationship {
                    if (relationship.target_id && relationship.type) {
                        this.hierarchical_memory.create_relationship(
                            memory.id,
                            relationship.target_id,
                            relationship.type,
                            {
                                bidirectional: relationship.bidirectional,
                                metadata: relationship.metadata
                            }
                        );
                    }
                });
            }
            
            ‚åΩ(:mi_success, `Stored memory with ID: ${memory.id}`);
            ‚üº(memory);
        }{
            ‚åΩ(:mi_error, "Failed to store memory");
            ‚üº(null);
        }
    }
    
    // Retrieve a memory by ID
    ∆íretrieve(Œπid, Œ±options) {
        ‚åΩ(:mi_retrieve, id);
        
        √∑{
            // Set retrieve options
            Œπretrieve_options = options || {};
            Œπinclude_related = retrieve_options.include_related !== undefined ? 
                              retrieve_options.include_related : ‚ä•;
            Œπinclude_path = retrieve_options.include_path !== undefined ? 
                           retrieve_options.include_path : ‚ä§;
            
            // Check if vector memory is initialized
            if (!this.components_status.vector_memory) {
                ‚åΩ(:mi_error, "Vector memory not initialized");
                ‚üº(null);
            }
            
            // Retrieve from vector memory
            Œπmemory = this.vector_memory.retrieve(id);
            
            if (!memory) {
                ‚åΩ(:mi_error, `Memory not found with ID: ${id}`);
                ‚üº(null);
            }
            
            // Add hierarchical information if available
            if (this.components_status.hierarchical_memory && include_path) {
                Œπpath = this.hierarchical_memory.get_memory_path(id);
                if (path) {
                    memory.path = path;
                }
            }
            
            // Add related memories if requested
            if (this.components_status.hierarchical_memory && include_related) {
                Œπrelated = this.hierarchical_memory.get_related_memories(id, {
                    include_content: ‚ä• // Don't include content to reduce size
                });
                
                if (related) {
                    memory.related = related;
                }
            }
            
            ‚åΩ(:mi_success, `Retrieved memory with ID: ${id}`);
            ‚üº(memory);
        }{
            ‚åΩ(:mi_error, `Failed to retrieve memory with ID: ${id}`);
            ‚üº(null);
        }
    }
    
    // Search memories
    ∆ísearch(œÉquery, Œ±options) {
        ‚åΩ(:mi_search, query);
        
        √∑{
            // Set search options
            Œπsearch_options = options || {};
            Œπsearch_type = search_options.search_type || "semantic";
            Œπlimit = search_options.limit || 5;
            Œπnamespace = search_options.namespace || null;
            Œπcategory = search_options.category || null;
            Œπmetadata = search_options.metadata || null;
            
            // Check if vector memory is initialized
            if (!this.components_status.vector_memory) {
                ‚åΩ(:mi_error, "Vector memory not initialized");
                ‚üº([]);
            }
            
            // Perform search based on type
            Œπresults = null;
            
            if (search_type === "semantic") {
                // Semantic search
                if (this.components_status.hierarchical_memory && (namespace || category)) {
                    // Search within hierarchy
                    results = this.hierarchical_memory.search_in_hierarchy(query, {
                        namespace: namespace,
                        category: category,
                        limit: limit
                    });
                } else {
                    // Direct vector search
                    results = this.vector_memory.search_by_similarity(query, {
                        limit: limit,
                        filter: metadata ? { metadata: metadata } : null
                    });
                }
            } else if (search_type === "metadata") {
                // Metadata search
                if (!metadata) {
                    ‚åΩ(:mi_error, "Metadata required for metadata search");
                    ‚üº([]);
                }
                
                results = this.vector_memory.search_by_metadata(metadata, {
                    limit: limit
                });
                
                // Add path information if hierarchical memory is available
                if (this.components_status.hierarchical_memory) {
                    ‚àÄ(results, Œªmemory {
                        Œπpath = this.hierarchical_memory.get_memory_path(memory.id);
                        if (path) {
                            memory.path = path;
                        }
                    });
                }
            } else {
                ‚åΩ(:mi_error, `Unknown search type: ${search_type}`);
                ‚üº([]);
            }
            
            ‚åΩ(:mi_success, `Found ${results.length} memories matching query`);
            ‚üº(results);
        }{
            ‚åΩ(:mi_error, "Failed to search memories");
            ‚üº([]);
        }
    }
    
    // Create a memory category
    ∆ícreate_category(œÉname, Œ±options) {
        √∑{
            // Check if hierarchical memory is initialized
            if (!this.components_status.hierarchical_memory) {
                ‚åΩ(:mi_error, "Hierarchical memory not initialized");
                ‚üº(null);
            }
            
            // Create category
            Œπcategory = this.hierarchical_memory.create_category(name, options);
            
            ‚üº(category);
        }{
            ‚åΩ(:mi_error, `Failed to create category: ${name}`);
            ‚üº(null);
        }
    }
    
    // Create a memory namespace
    ∆ícreate_namespace(œÉname, œÉcategory, Œ±options) {
        √∑{
            // Check if hierarchical memory is initialized
            if (!this.components_status.hierarchical_memory) {
                ‚åΩ(:mi_error, "Hierarchical memory not initialized");
                ‚üº(null);
            }
            
            // Create namespace
            Œπnamespace = this.hierarchical_memory.create_namespace(name, category, options);
            
            ‚üº(namespace);
        }{
            ‚åΩ(:mi_error, `Failed to create namespace: ${name}`);
            ‚üº(null);
        }
    }
    
    // Create a relationship between memories
    ∆ícreate_relationship(Œπmemory_id1, Œπmemory_id2, œÉrelationship_type, Œ±options) {
        √∑{
            // Check if hierarchical memory is initialized
            if (!this.components_status.hierarchical_memory) {
                ‚åΩ(:mi_error, "Hierarchical memory not initialized");
                ‚üº(null);
            }
            
            // Create relationship
            Œπrelationship = this.hierarchical_memory.create_relationship(
                memory_id1,
                memory_id2,
                relationship_type,
                options
            );
            
            ‚üº(relationship);
        }{
            ‚åΩ(:mi_error, `Failed to create relationship between memories ${memory_id1} and ${memory_id2}`);
            ‚üº(null);
        }
    }
    
    // Get memory statistics
    ∆íget_stats() {
        √∑{
            Œπstats = {
                vector_memory: this.components_status.vector_memory ? 
                             this.vector_memory.get_stats() : null,
                hierarchical_memory: this.components_status.hierarchical_memory ? {
                    categories: Object.keys(this.hierarchical_memory.categories).length,
                    namespaces: Object.keys(this.hierarchical_memory.namespaces).length,
                    relationships: Object.keys(this.hierarchical_memory.relationships).length
                } : null
            };
            
            ‚üº(stats);
        }{
            ‚åΩ(:mi_error, "Failed to get memory statistics");
            ‚üº(null);
        }
    }
    
    // Get category hierarchy
    ∆íget_category_hierarchy(œÉroot_category) {
        √∑{
            // Check if hierarchical memory is initialized
            if (!this.components_status.hierarchical_memory) {
                ‚åΩ(:mi_error, "Hierarchical memory not initialized");
                ‚üº(null);
            }
            
            // Get hierarchy
            Œπhierarchy = this.hierarchical_memory.get_category_hierarchy(root_category);
            
            ‚üº(hierarchy);
        }{
            ‚åΩ(:mi_error, `Failed to get category hierarchy for: ${root_category || "all categories"}`);
            ‚üº(null);
        }
    }
    
    // Private: Initialize all components
    ∆í_initialize_components() {
        // Initialize vector memory
        √∑{
            ŒπVectorMemory = require("./vector_memory");
            this.vector_memory = VectorMemory();
            this.vector_memory.initialize({
                embedding_dimensions: this.options.embedding_dimensions,
                llm_integration: this.options.llm_integration,
                storage_path: `${this.options.storage_path}/vector`
            });
            this.components_status.vector_memory = ‚ä§;
        }{
            ‚åΩ(:mi_error, "Failed to initialize vector memory");
        }
        
        // Initialize hierarchical memory
        √∑{
            ŒπHierarchicalMemory = require("./hierarchical_memory");
            this.hierarchical_memory = HierarchicalMemory();
            this.hierarchical_memory.initialize({
                vector_memory: this.vector_memory,
                storage_path: `${this.options.storage_path}/hierarchy`
            });
            this.components_status.hierarchical_memory = ‚ä§;
        }{
            ‚åΩ(:mi_error, "Failed to initialize hierarchical memory");
        }
    }
}

// Export the MemoryIntegration module
‚üº(MemoryIntegration);
