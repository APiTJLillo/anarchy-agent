// Memory module implementation in Anarchy-Inference
// Load the string dictionary
üî†("string_dictionary.json");

// Define the Memory module
∆íMemory() {
    Œπ self = {};
    
    // Initialize the memory module
    self.initialize = Œª() {
        // Initialize the database
        self.db.initialize();
        
        ‚Ü© true;
    };
    
    // Store a task result in memory
    self.store_result = Œª(task, code, result) {
        self.db.store_execution(task, code, result);
        ‚Ü© true;
    };
    
    // Retrieve context relevant to a task description
    self.retrieve_context = Œª(task_description) {
        Œπ relevant_entries = self.db.query_relevant(task_description);
        Œπ context = self.format_context(relevant_entries);
        ‚Ü© context;
    };
    
    // Format context from relevant entries
    self.format_context = Œª(entries) {
        ‚Ü™(entries.length == 0) {
            ‚Ü© "";
        }
        
        Œπ context = "Previous relevant executions:\n";
        ‚àÄ(entries, Œªentry {
            context += `Task: ${entry.task}\nCode: ${entry.code}\nResult: ${entry.result}\n\n`;
        });
        
        ‚Ü© context;
    };
    
    // Store a key-value pair in memory (for Anarchy-Inference üìù symbol)
    self.set_memory = Œª(key, value) {
        self.db.set_key_value(key, value);
        ‚Ü© true;
    };
    
    // Retrieve a value by key from memory (for Anarchy-Inference üìñ symbol)
    self.get_memory = Œª(key) {
        Œπ value = self.db.get_key_value(key);
        ‚Ü© value;
    };
    
    // Delete a key from memory (for Anarchy-Inference üóë symbol)
    self.forget_key = Œª(key) {
        self.db.delete_key_value(key);
        ‚Ü© true;
    };
    
    // Shutdown the memory module
    self.shutdown = Œª() {
        // Close the database connection
        self.db.close();
        
        ‚Ü© true;
    };
    
    ‚Ü© self;
}

// Export the module
‚üº(Memory);
