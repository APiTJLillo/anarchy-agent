// file_system_operations.a.i - File system operations for Anarchy Agent
// Implements directory listing, file reading/writing, file/directory removal, and file copying/moving

// Define string dictionary entries for file system operations
üìù("fs_init", "Initializing file system operations...");
üìù("fs_list_dir", "Listing directory: {}");
üìù("fs_read_file", "Reading file: {}");
üìù("fs_write_file", "Writing to file: {}");
üìù("fs_remove", "Removing file/directory: {}");
üìù("fs_copy", "Copying file: {} to {}");
üìù("fs_move", "Moving file: {} to {}");
üìù("fs_exists", "Checking if file exists: {}");
üìù("fs_error", "File system error: {}");
üìù("fs_success", "File system operation successful: {}");

// FileSystem Module Definition
ŒªFileSystem {
    // Initialize file system operations
    ∆íinitialize(Œ±options) {
        ‚åΩ(:fs_init);
        
        // Set default options
        Œπthis.options = options || {};
        Œπthis.options.base_dir = this.options.base_dir || ".";
        Œπthis.options.allowed_dirs = this.options.allowed_dirs || ["."];
        Œπthis.options.max_file_size = this.options.max_file_size || 10485760; // 10MB
        
        ‚üº(‚ä§);
    }
    
    // List directory contents
    ∆ílist_directory(œÉpath) {
        ‚åΩ(:fs_list_dir, path);
        
        √∑{
            // Validate path
            if (!this._validate_path(path)) {
                ‚åΩ(:fs_error, `Access denied to path: ${path}`);
                ‚üº(null);
            }
            
            // Get full path
            Œπfull_path = this._get_full_path(path);
            
            // Check if directory exists
            Œπexists = ?(full_path);
            if (!exists) {
                ‚åΩ(:fs_error, `Directory does not exist: ${path}`);
                ‚üº(null);
            }
            
            // List directory contents
            Œπfiles = üìÇ(full_path);
            
            ‚üº(files);
        }{
            ‚åΩ(:fs_error, `Failed to list directory: ${path}`);
            ‚üº(null);
        }
    }
    
    // Read file content
    ∆íread_file(œÉpath) {
        ‚åΩ(:fs_read_file, path);
        
        √∑{
            // Validate path
            if (!this._validate_path(path)) {
                ‚åΩ(:fs_error, `Access denied to path: ${path}`);
                ‚üº(null);
            }
            
            // Get full path
            Œπfull_path = this._get_full_path(path);
            
            // Check if file exists
            Œπexists = ?(full_path);
            if (!exists) {
                ‚åΩ(:fs_error, `File does not exist: ${path}`);
                ‚üº(null);
            }
            
            // Read file content
            Œπcontent = üìñ(full_path);
            
            ‚üº(content);
        }{
            ‚åΩ(:fs_error, `Failed to read file: ${path}`);
            ‚üº(null);
        }
    }
    
    // Write content to file
    ∆íwrite_file(œÉpath, œÉcontent, Œ≤append) {
        ‚åΩ(:fs_write_file, path);
        
        √∑{
            // Validate path
            if (!this._validate_path(path)) {
                ‚åΩ(:fs_error, `Access denied to path: ${path}`);
                ‚üº(‚ä•);
            }
            
            // Get full path
            Œπfull_path = this._get_full_path(path);
            
            // Create directory if it doesn't exist
            Œπdir_path = full_path.substring(0, full_path.lastIndexOf("/"));
            Œπdir_exists = ?(dir_path);
            if (!dir_exists) {
                !(`mkdir -p ${dir_path}`);
            }
            
            // Check content size
            if (content.length > this.options.max_file_size) {
                ‚åΩ(:fs_error, `Content exceeds maximum file size: ${this.options.max_file_size} bytes`);
                ‚üº(‚ä•);
            }
            
            // Write content to file
            if (append) {
                // Append to file
                Œπexisting_content = "";
                Œπfile_exists = ?(full_path);
                if (file_exists) {
                    existing_content = üìñ(full_path);
                }
                ‚úç(full_path, existing_content + content);
            } else {
                // Overwrite file
                ‚úç(full_path, content);
            }
            
            ‚üº(‚ä§);
        }{
            ‚åΩ(:fs_error, `Failed to write to file: ${path}`);
            ‚üº(‚ä•);
        }
    }
    
    // Remove file or directory
    ∆íremove(œÉpath) {
        ‚åΩ(:fs_remove, path);
        
        √∑{
            // Validate path
            if (!this._validate_path(path)) {
                ‚åΩ(:fs_error, `Access denied to path: ${path}`);
                ‚üº(‚ä•);
            }
            
            // Get full path
            Œπfull_path = this._get_full_path(path);
            
            // Check if file/directory exists
            Œπexists = ?(full_path);
            if (!exists) {
                ‚åΩ(:fs_error, `File/directory does not exist: ${path}`);
                ‚üº(‚ä•);
            }
            
            // Remove file/directory
            ‚úÇ(full_path);
            
            ‚üº(‚ä§);
        }{
            ‚åΩ(:fs_error, `Failed to remove file/directory: ${path}`);
            ‚üº(‚ä•);
        }
    }
    
    // Copy file
    ∆ícopy_file(œÉsource, œÉdestination) {
        ‚åΩ(:fs_copy, source, destination);
        
        √∑{
            // Validate paths
            if (!this._validate_path(source) || !this._validate_path(destination)) {
                ‚åΩ(:fs_error, `Access denied to path: ${!this._validate_path(source) ? source : destination}`);
                ‚üº(‚ä•);
            }
            
            // Get full paths
            Œπfull_source = this._get_full_path(source);
            Œπfull_destination = this._get_full_path(destination);
            
            // Check if source file exists
            Œπsource_exists = ?(full_source);
            if (!source_exists) {
                ‚åΩ(:fs_error, `Source file does not exist: ${source}`);
                ‚üº(‚ä•);
            }
            
            // Create destination directory if it doesn't exist
            Œπdest_dir = full_destination.substring(0, full_destination.lastIndexOf("/"));
            Œπdir_exists = ?(dest_dir);
            if (!dir_exists) {
                !(`mkdir -p ${dest_dir}`);
            }
            
            // Copy file
            ‚ßâ(full_source, full_destination);
            
            ‚üº(‚ä§);
        }{
            ‚åΩ(:fs_error, `Failed to copy file from ${source} to ${destination}`);
            ‚üº(‚ä•);
        }
    }
    
    // Move file
    ∆ímove_file(œÉsource, œÉdestination) {
        ‚åΩ(:fs_move, source, destination);
        
        √∑{
            // Validate paths
            if (!this._validate_path(source) || !this._validate_path(destination)) {
                ‚åΩ(:fs_error, `Access denied to path: ${!this._validate_path(source) ? source : destination}`);
                ‚üº(‚ä•);
            }
            
            // Get full paths
            Œπfull_source = this._get_full_path(source);
            Œπfull_destination = this._get_full_path(destination);
            
            // Check if source file exists
            Œπsource_exists = ?(full_source);
            if (!source_exists) {
                ‚åΩ(:fs_error, `Source file does not exist: ${source}`);
                ‚üº(‚ä•);
            }
            
            // Create destination directory if it doesn't exist
            Œπdest_dir = full_destination.substring(0, full_destination.lastIndexOf("/"));
            Œπdir_exists = ?(dest_dir);
            if (!dir_exists) {
                !(`mkdir -p ${dest_dir}`);
            }
            
            // Move file
            ‚Ü∑(full_source, full_destination);
            
            ‚üº(‚ä§);
        }{
            ‚åΩ(:fs_error, `Failed to move file from ${source} to ${destination}`);
            ‚üº(‚ä•);
        }
    }
    
    // Check if file exists
    ∆ífile_exists(œÉpath) {
        ‚åΩ(:fs_exists, path);
        
        √∑{
            // Validate path
            if (!this._validate_path(path)) {
                ‚åΩ(:fs_error, `Access denied to path: ${path}`);
                ‚üº(‚ä•);
            }
            
            // Get full path
            Œπfull_path = this._get_full_path(path);
            
            // Check if file exists
            Œπexists = ?(full_path);
            
            ‚üº(exists);
        }{
            ‚åΩ(:fs_error, `Failed to check if file exists: ${path}`);
            ‚üº(‚ä•);
        }
    }
    
    // Private: Validate path against allowed directories
    ∆í_validate_path(œÉpath) {
        // Normalize path
        Œπnormalized_path = path.replace(/\/+/g, "/").replace(/\/\.\//g, "/");
        
        // Check for path traversal attempts
        if (normalized_path.includes("..")) {
            ‚üº(‚ä•);
        }
        
        // Check if path is within allowed directories
        ‚àÄ(this.options.allowed_dirs, Œªallowed_dir {
            if (normalized_path.startsWith(allowed_dir)) {
                ‚üº(‚ä§);
            }
        });
        
        ‚üº(‚ä•);
    }
    
    // Private: Get full path
    ∆í_get_full_path(œÉpath) {
        // If path is absolute, return as is
        if (path.startsWith("/")) {
            ‚üº(path);
        }
        
        // Otherwise, prepend base directory
        ‚üº(`${this.options.base_dir}/${path}`);
    }
    
    // Emoji operators for direct use
    // These match the IMPLEMENTATION_DETAILS.md documentation
    
    // üìÇ (list_directory) - List directory contents
    ∆íüìÇ(œÉpath) {
        ‚üº(this.list_directory(path));
    }
    
    // üìñ (read_file) - Read file content
    ∆íüìñ(œÉpath) {
        ‚üº(this.read_file(path));
    }
    
    // ‚úç (write_file) - Write content to file
    ∆í‚úç(œÉpath, œÉcontent) {
        ‚üº(this.write_file(path, content, ‚ä•));
    }
    
    // ‚úÇ (remove_file_directory) - Remove file or directory
    ∆í‚úÇ(œÉpath) {
        ‚üº(this.remove(path));
    }
    
    // ‚ßâ (copy_file) - Copy file
    ∆í‚ßâ(œÉsource, œÉdestination) {
        ‚üº(this.copy_file(source, destination));
    }
    
    // ‚Ü∑ (move_file) - Move file
    ∆í‚Ü∑(œÉsource, œÉdestination) {
        ‚üº(this.move_file(source, destination));
    }
    
    // ? (file_exists) - Check if file exists
    ∆í?(œÉpath) {
        ‚üº(this.file_exists(path));
    }
}

// Export the FileSystem module
‚üº(FileSystem);
