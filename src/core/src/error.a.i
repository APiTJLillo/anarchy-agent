// Load the string dictionary
ðŸ” ("string_dictionary.json");

// Error handling module for the Anarchy Agent
// This module defines error types and handling functions

// Create a new error object
Æ’new_error(type, message) {
    â†© {
        type: type,
        message: message
    };
}

// Error type constants
Î¹ ERROR_CONFIG = "config";
Î¹ ERROR_PLANNER = "planner";
Î¹ ERROR_EXECUTOR = "executor";
Î¹ ERROR_MEMORY = "memory";
Î¹ ERROR_BROWSER = "browser";
Î¹ ERROR_FILESYSTEM = "filesystem";
Î¹ ERROR_SHELL = "shell";
Î¹ ERROR_IO = "io";
Î¹ ERROR_PARSE = "parse";
Î¹ ERROR_RUNTIME = "runtime";
Î¹ ERROR_LLM = "llm";

// Create specific error types
Æ’config_error(message) {
    â†© new_error(ERROR_CONFIG, message);
}

Æ’planner_error(message) {
    â†© new_error(ERROR_PLANNER, message);
}

Æ’executor_error(message) {
    â†© new_error(ERROR_EXECUTOR, message);
}

Æ’memory_error(message) {
    â†© new_error(ERROR_MEMORY, message);
}

Æ’browser_error(message) {
    â†© new_error(ERROR_BROWSER, message);
}

Æ’filesystem_error(message) {
    â†© new_error(ERROR_FILESYSTEM, message);
}

Æ’shell_error(message) {
    â†© new_error(ERROR_SHELL, message);
}

Æ’io_error(message) {
    â†© new_error(ERROR_IO, message);
}

Æ’parse_error(message) {
    â†© new_error(ERROR_PARSE, message);
}

Æ’runtime_error(message) {
    â†© new_error(ERROR_RUNTIME, message);
}

Æ’llm_error(message) {
    â†© new_error(ERROR_LLM, message);
}

// Format error for display
Æ’format_error(error) {
    â†ª(error.type == ERROR_CONFIG) {
        â†© :config_error_prefix + error.message;
    } â†ª(error.type == ERROR_PLANNER) {
        â†© :planner_error_prefix + error.message;
    } â†ª(error.type == ERROR_EXECUTOR) {
        â†© :executor_error_prefix + error.message;
    } â†ª(error.type == ERROR_MEMORY) {
        â†© :memory_error_prefix + error.message;
    } â†ª(error.type == ERROR_BROWSER) {
        â†© :browser_error_prefix + error.message;
    } â†ª(error.type == ERROR_FILESYSTEM) {
        â†© :filesystem_error_prefix + error.message;
    } â†ª(error.type == ERROR_SHELL) {
        â†© :shell_error_prefix + error.message;
    } â†ª(error.type == ERROR_IO) {
        â†© :io_error_prefix + error.message;
    } â†ª(error.type == ERROR_PARSE) {
        â†© :parse_error_prefix + error.message;
    } â†ª(error.type == ERROR_RUNTIME) {
        â†© :runtime_error_prefix + error.message;
    } â†ª(error.type == ERROR_LLM) {
        â†© :llm_error_prefix + error.message;
    } â†› {
        â†© :unknown_error_prefix + error.message;
    }
}

// Convert from other error types
Æ’convert_error(error, target_type) {
    â†© new_error(target_type, error.message);
}
